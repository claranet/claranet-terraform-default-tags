variables:
  TFDOCS_IMAGE: "quay.io/terraform-docs/terraform-docs"
  TFLINT_IMAGE: "ghcr.io/terraform-linters/tflint"
  TFLINT_PLUGIN_DIR: ".tflint.d/plugins"
  TFSEC_ARGS: "."
  TFSEC_ENABLED: "true"
  TFSEC_IMAGE: "aquasec/tfsec-ci"
  TF_IN_AUTOMATION: "true"
default:
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
      - .terraform/

config:
  stage: .pre
  script:
    - source .env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - exists:
        - .env

.terraform:tfdocs:
  image:
    ${TFDOCS_IMAGE}:${TFDOCS_VERSION}
  stage: docs
  script:
    - terraform-docs markdown table --output-file README.md --output-template '<!-- BEGINNING OF PRE-COMMIT-TERRAFORM DOCS HOOK -->\n{{ .Content }}\n<!-- END OF PRE-COMMIT-TERRAFORM DOCS HOOK -->' .
    - git diff --exit-code
  rules:
    # exclude merge requests
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_REF_NAME && $CI_PIPELINE_SOURCE != "schedule"

.terraform:tflint:
  image:
    name: ${TFLINT_IMAGE}:v${TFLINT_VERSION}
  stage: lint
  before_script:
    - mkdir -p reports
  script:
    - >
      [ ! -d ".tflint.d/plugins" ] && tflint --init
    - tflint
    - tflint --format=junit  > reports/tflint.xml
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    reports:
      junit: reports/tflint.xml
    paths:
      - reports/
  rules:
    # exclude merge requests
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_REF_NAME && $CI_PIPELINE_SOURCE != "schedule"

.terraform:tfsec:
  image:
    name : ${TFSEC_IMAGE}:v${TFSEC_VERSION}
    entrypoint: [""]
  stage: lint
  before_script:
    - mkdir -p reports
  script:
    - |
      tfsec $TFSEC_ARGS
      tfsec --format junit --out "reports/tfsec.xml" $TFSEC_ARGS
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    reports:
      junit: reports/tfsec.xml
    paths:
      - reports/
  rules:
    # exclude merge requests
    - if: $CI_MERGE_REQUEST_ID
      when: never
    # on any branch: when $TFSEC_ENABLED is set
    - if: $TFSEC_ENABLED && $CI_PIPELINE_SOURCE != "schedule"
      allow_failure: true

stages:
  - lint
  - docs
  - release

tfdocs:
  extends: .terraform:tfdocs

tflint:
  extends: .terraform:tflint

tfsec:
  extends: .terraform:tfsec

publish:
  image: node:16.19.0
  before_script:
    - npm ci --cache .npm --prefer-offline
  stage: release
  script:
    - npm run semantic-release
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - ops4ops-claranet
